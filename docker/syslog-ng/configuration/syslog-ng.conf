@version: 3.25
@include "scl.conf"

##Configuring global syslog-ng options
options { keep-hostname(yes);};

##########  SkyDRM configuration   ##############

source tls_logger {
   network(
      port(6513)
		transport("tls")
		encoding("UTF-8")
	    flags(expect-hostname)
		program-override("logger")
        tls(
		    peer-verify(optional-trusted)
            key-file("/etc/syslog-ng/cert.d/serverkey.pem")
            cert-file("/etc/syslog-ng/cert.d/servercert.pem")
            ca-dir("/etc/syslog-ng/ca.d")
			cipher-suite("AES256-SHA256")
			ssl-options(no-sslv2, no-sslv3, no-tlsv1)
		   )
    );
};


filter app_filter { facility(local0) };
filter audit_filter { facility(local1) };
filter activity_filter { facility(local2) };

parser parser_log {
    json-parser (prefix(".json."));
};


destination d_pgs_app_sql {
    sql(type(pgsql)
    host("10.63.0.208") username("logs") password("123next!")
    database("logs")
    table("app_log_mngmt")
    columns("id integer","datetime varchar(16)", "host varchar(32)", "program  varchar(20)", "pid varchar(8)","source varchar(100)", "message  varchar(2000)", "facility varchar(50)",
	"priority varchar(50)","host_from varchar(50)", "rawmsg varchar(2500)","ipaddress varchar(50)","logdate varchar(16)",
	"applicationname varchar(50)","hostname varchar(32)","domainname varchar(60)")
    values("${SEQNUM}","${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}","${SOURCE}", "${MSGONLY}","${FACILITY}", "${LEVEL}","${FULLHOST_FROM}","${RAWMSG}","${.json.ipAddress}","${.json.logDate}", "${.json.applicationName}","${.json.hostName}","${.json.domainName}")
    indexes("datetime", "host", "program", "pid", "message"));
};



destination d_pgs_audit_sql {
    sql(type(pgsql)
    host("10.63.0.208") username("logs") password("123next!")
    database("logs")
    table("audit_log_mngmt")
    columns("id integer","datetime varchar(16)", "host varchar(32)", "program  varchar(20)", "pid varchar(8)","source varchar(100)","message  varchar(2000)", "facility varchar(50)","priority varchar(50)","host_from varchar(50)","rawmsg varchar(2500)", "category varchar(120)","service varchar(120)","command varchar(120)","result integer","ipaddress varchar(32)","clientid varchar(36)","platformid integer" )
    values("${SEQNUM}","${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}","${SOURCE}", "${MSGONLY}","${FACILITY}", "${LEVEL}","${FULLHOST_FROM}","${RAWMSG}","${.json.category}","${.json.service}","${.json.command}","${.json.result}","${.json.ipAddress}",
	"${.json.clientId}","${.json.platformId}")
    indexes("datetime", "host", "program", "pid", "message"));
};




destination d_pgs_activity_sql {
    sql(type(pgsql)
    host("10.63.0.208") username("logs") password("123next!")
    database("logs")
    table("activity_log_mngmt")
    columns("rowid integer","datetime varchar(16)", "host varchar(32)", "program  varchar(20)", "pid varchar(8)","source varchar(100)", "message  varchar(2000)", "facility varchar(50)","priority varchar(50)","host_from varchar(50)", "rawmsg varchar(2500)","id varchar(36)",,"duid varchar(36)","owner varchar(150)","userid integer","operation integer","ipaddress varchar(32)","devicetype integer","repositoryid varchar(36)","filepathid varchar(2000)","filename varchar(2000)","filepath varchar(2000)","appname varchar(150)","apppath varchar(512)","apppublisher varchar(150)","accessresult integer","activitydata varchar(1000)","accounttype varchar(36)")
    values("${SEQNUM}","${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}","${SOURCE}", "${MSGONLY}","${FACILITY}","${LEVEL}","${FULLHOST_FROM}","${RAWMSG}","${.json.id}","${.json.duid}","${.json.owner}","${.json.userId}","${.json.operation}","${.json.deviceId}","${.json.deviceType}","${.json.repositoryId}","${.json.filePathId}","${.json.fileName}","${.json.filePath}","${.json.appName}","${.json.appPath}","${.json.appPublisher}","${.json.accessResult}","${.json.activityData}",
	"${.json.accountType}")
	indexes("datetime", "host", "program", "pid", "message"));
};

# Store messages in a log file
log {source(tls_logger);  filter(app_filter);  parser(parser_log); destination(d_pgs_app_sql); };
log {source(tls_logger);  filter(audit_filter);  parser(parser_log); destination(d_pgs_audit_sql); };
log {source(tls_logger);  filter(activity_filter);  parser(parser_log); destination(d_pgs_activity_sql); };
#log { source(tls_logger);  destination(d_pgs_app_sql); };

