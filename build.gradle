plugins {
	id 'org.springframework.boot' version '2.1.8.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id "com.diffplug.gradle.spotless" version "3.24.2"
}

group = 'com.nextlabs'
sourceCompatibility = '1.8'


apply plugin: 'war'

war {
    archiveName 'logger.war'
	dependsOn jar
	}
repositories {
	mavenCentral()
	mavenCentral()
	maven {
		url "http://maven.restlet.org"
	}
	maven {
		url "https://www.oracle.com/content/secure/maven/content"
		credentials {
			username = 'nextlabsdev@gmail.com'
			password = '123Blue!'
		}
	}
}

dependencies {
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	compile('org.springframework.boot:spring-boot-starter-security'){
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	compile('org.springframework.boot:spring-boot-starter-log4j2')
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	compile('org.springframework.boot:spring-boot-starter-tomcat')
	compile('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation "javax.xml.bind:jaxb-api:2.2.11"
	implementation "com.sun.xml.bind:jaxb-core:2.2.11"
	implementation "com.sun.xml.bind:jaxb-impl:2.2.11"
	implementation "javax.activation:activation:1.1.1"
}


apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'pmd'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'findbugs'

ext {
	cfgDir = "$rootProject.rootDir/config"
	buildDir = "$rootProject.rootDir/build"
}

checkstyle {
	toolVersion '6.9'
	configFile file("config/checkstyle/checkstyle.xml")
	configProperties = [ "checkstyle.suppressions.file" : file("$cfgDir/checkstyle/suppressions.xml")]
	ignoreFailures = false
}
tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
		html.stylesheet resources.text.fromFile("$cfgDir/checkstyle/checkstyle.xsl")
		html.destination file("$buildDir/checkstyle.html")
	}
}


configurations {
	formatter
}


pmd {
	toolVersion = "5.8.1"
	ruleSetFiles = files("$cfgDir/pmd/pmd.xml")
	ignoreFailures = false
}

tasks.withType(Pmd) {
	reports {
		xml.enabled false
		html.enabled true
		html.destination file("$buildDir/pmd.html")
		}
}

spotless {
	java {
		importOrder 'com','io', 'java',  'javax', 'net', 'noNamespace','org', ''
		eclipse().configFile "$cfgDir/formatter/conventions.xml"
		}
}

task formatJava (dependsOn: ['spotlessJavaApply']) {
}

task formatXml {
	doLast {
		def verify = project.hasProperty('verifyOnly') ? Boolean.valueOf(verifyOnly) : false
		ant.taskdef(name:'formatXml',
				classname: 'net.sourceforge.formatter.ant.FormatXmlTask',
				classpath: configurations.formatter.asPath)
		ant.formatXml(
				failOnError: false,
				verifyOnly: verify) {
			fileset(dir: 'src')
		}
	}
}


findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    excludeFilter = file("$cfgDir/findbugs/excludeFilter.xml")
    reportsDir = file("$buildDir/reports/findbugs")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task validate (dependsOn: ['spotlessJavaCheck', 'findbugsMain', 'pmdMain', 'checkstyleMain']){}

